package com.revature.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Commit;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;
import org.springframework.test.annotation.DirtiesContext.MethodMode;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.ContextHierarchy;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.transaction.annotation.Transactional;

import com.revature.model.Ship;
import com.revature.template.ShipTemplate;

@ExtendWith(SpringExtension.class)
@ContextHierarchy({
	@ContextConfiguration("classpath:applicationContext.xml"),
	@ContextConfiguration("classpath:dispatcherContext.xml")
})
@WebAppConfiguration
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@DirtiesContext(classMode = ClassMode.BEFORE_CLASS)
class ShipDAOUnitTest {

	@Autowired
	private ShipDAO shipDAO;

	@Test
	@Transactional
	@Order(0)
	@Commit // or @Rollback(false), functionally the same
	void testAddShip_hasAutoGeneratedId() {
		ShipTemplate st = new ShipTemplate("Queen Anne's Revenge");
		
		Ship ship = shipDAO.addShip(st);
		
		System.out.println(ship);
		
		assertTrue(ship.getId() != 0);
	}
	
	@Test
	@Transactional
	@Order(1)
	void testGetShipById_success() {
		Ship actual = shipDAO.getShipById(1);
		
		Ship expected = new Ship(1, "Queen Anne's Revenge");
		
		assertEquals(expected, actual);
	}
	
	@Test
	@Transactional
	@Order(2)
	void testGetShipById_shipDoesNotExist() {
		Ship actual = shipDAO.getShipById(Integer.MAX_VALUE);
		
		Ship expected = null;
		
		assertEquals(expected, actual);
	}

}
